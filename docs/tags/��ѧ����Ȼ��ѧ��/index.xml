<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数学与自然科学类 on 罗潇阳的博客</title>
    <link>http://ccviolett.github.io/tags/%E6%95%B0%E5%AD%A6%E4%B8%8E%E8%87%AA%E7%84%B6%E7%A7%91%E5%AD%A6%E7%B1%BB/</link>
    <description>Recent content in 数学与自然科学类 on 罗潇阳的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 23 Mar 2022 20:46:47 +0800</lastBuildDate><atom:link href="http://ccviolett.github.io/tags/%E6%95%B0%E5%AD%A6%E4%B8%8E%E8%87%AA%E7%84%B6%E7%A7%91%E5%AD%A6%E7%B1%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学习笔记 | C&#43;&#43; 程序设计</title>
      <link>http://ccviolett.github.io/posts/28-lesson-cpp/</link>
      <pubDate>Wed, 23 Mar 2022 20:46:47 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/posts/28-lesson-cpp/</guid>
      <description>构造函数与析构函数执行顺序    当一个有成员对象的派生类对象时，各构造函数体的执行次序为 (C)。
 (A) 派生类、成员对象类、基类； (B) 成员对象类、基类、派生类； (C) 基类、成员对象类、派生类； (D) 基类、派生类、成员对象类  在新建对象时
 首先会按照继承顺序（从左到右）执行基类构造函数 然后会按照声明顺序（从上到下）执行成员对象类构造函数 最后执行当前类的构造函数  成员对象构造函数的调用顺序和初始化列表中顺序无关，只和声明顺序有关。
析构函数执行顺序正好相反，先构造后析构，后构造先析构。
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; class A { public: A() { cout &amp;lt;&amp;lt; &amp;#34;A&amp;#34;; } ~A() { cout &amp;lt;&amp;lt; &amp;#34;a&amp;#34;; } }; class B { public: B() { cout &amp;lt;&amp;lt; &amp;#34;B&amp;#34;; } ~B() { cout &amp;lt;&amp;lt; &amp;#34;b&amp;#34;; } }; class D { public: D() { cout &amp;lt;&amp;lt; &amp;#34;D&amp;#34;; } ~D() { cout &amp;lt;&amp;lt; &amp;#34;d&amp;#34;; } }; class E { public: E() { cout &amp;lt;&amp;lt; &amp;#34;E&amp;#34;; } ~E() { cout &amp;lt;&amp;lt; &amp;#34;e&amp;#34;; } }; class F { public: F() { cout &amp;lt;&amp;lt; &amp;#34;F&amp;#34;; } ~F() { cout &amp;lt;&amp;lt; &amp;#34;f&amp;#34;; } }; class C : public A, public E { D d; B b; public: C(): b(), f(), d() { cout &amp;lt;&amp;lt; &amp;#34;C&amp;#34;; } ~C() { cout &amp;lt;&amp;lt; &amp;#34;c&amp;#34;; } F f; }; int main() { C *c = new C(); delete c; return 0; } 当上述程序运行时，输出的结果为 &amp;ldquo;AEDBFCcfbdea&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>
