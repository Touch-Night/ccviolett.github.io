<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大学课程 on 罗潇阳的博客</title>
    <link>http://ccviolett.github.io/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/</link>
    <description>Recent content in 大学课程 on 罗潇阳的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 04 Apr 2022 07:56:27 +0800</lastBuildDate><atom:link href="http://ccviolett.github.io/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学习笔记 | 逻辑学导论</title>
      <link>http://ccviolett.github.io/posts/38-lesson-logic/</link>
      <pubDate>Mon, 04 Apr 2022 07:56:27 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/posts/38-lesson-logic/</guid>
      <description>直言命题 文恩图 欧拉图 周延性 对当方阵（逻辑方阵） 对当关系论证   1. 引论：走进逻辑学  1.1 逻辑学是什么 1.2 逻辑与法律：普罗泰戈拉悖论 1.3 逻辑学的功能和研究范围 1.4 认识“非西方逻辑”   2. 论证  2.1 论证的关键概念 2.2 命题、陈述与语句 2.3 经验命题与必然命题 2.4 论证的含义与类型     直言命题    每一个直言命题都由四个要素构成：量项-主项-联项-谓项
如：量项(所有) 主项(艺术家) 联项(都是) 谓项(人)
直言命题的四种形式：
 A：所有 S 都是 P E：所有 S 都不是 P I：有些 S 是 P O：有些 S 不是 P  直言命题的量：根据直言命题的量项，分为 全称命题 与 特称命题。</description>
    </item>
    
    <item>
      <title>学习笔记 | C&#43;&#43; 程序设计</title>
      <link>http://ccviolett.github.io/posts/28-lesson-cpp/</link>
      <pubDate>Wed, 23 Mar 2022 20:46:47 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/posts/28-lesson-cpp/</guid>
      <description>实参的数量    函数调用 func((exp1, exp2), (exp3, exp4, exp5)) 中所含 2 个实参。
抽象类    抽象类是包含纯虚函数的类，即包含 virtual void Func(void) = 0;。
多继承与二义性    一个派生类的两个基类中都有某个同名成员，在派生类中对这个成员的访问可能出现二义性。
解决二义性的最常用的方法是对成员名的限定。
一个派生类是从两个基类派生来的，而这两个基类又有一个共同的基类，对该基类成员进行访问时，可能出现二义性。
静态成员    静态成员在创建对象前就存在，是类的成员。
静态成员函数不能是静态函数，不能直接访问非静态成员。
访问共有静态成员的方式有以下三种：
 类名::静态成员名 对象名.静态成员名 对象指针-&amp;gt;静态成员名  问题：请问下列程序会输出什么？
#include &amp;lt;iostream&amp;gt; using namespace std; int fun() { static int x = 1; x *= 2; return x; } int main() { int i, s = 1; for (i = 1; i &amp;lt;= 3; ++i) s *= fun(); cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl; } 答案：64</description>
    </item>
    
  </channel>
</rss>
