<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>很妙的思维题 on 罗潇阳的博客</title>
    <link>http://ccviolett.github.io/tags/%E5%BE%88%E5%A6%99%E7%9A%84%E6%80%9D%E7%BB%B4%E9%A2%98/</link>
    <description>Recent content in 很妙的思维题 on 罗潇阳的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 14 Apr 2022 00:01:07 +0800</lastBuildDate><atom:link href="http://ccviolett.github.io/tags/%E5%BE%88%E5%A6%99%E7%9A%84%E6%80%9D%E7%BB%B4%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode41. 缺失的第一个正数</title>
      <link>http://ccviolett.github.io/solution/leetcode41/</link>
      <pubDate>Thu, 14 Apr 2022 00:01:07 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/leetcode41/</guid>
      <description>一、题意    题目链接：Problem
二、题解    题目限制线性时间与常数级别空间，我们需要考虑原地做法。
有两种方式，一种是负号占位，一种是置换归位。
负号占位是指将数组中负数都清楚之后，将每个值对应下标位置上的数取反，随后再遍历一次得到第一个未取反的数，即为最小未出现数。
置换归位是指将数组中能够对应的值放到其值对应的下标上，排除掉无限循环的情况，通过每个元素是否等于其下标即可判断。
三、代码    通过链接：Submission
class Solution: def firstMissingPositive(self, nums: List[int]) -&amp;gt; int: for i in range(len(nums)): v = nums[i] while v &amp;gt; 0 and v &amp;lt;= len(nums) and (v - 1) != i and v != nums[v - 1]: nums[i] = nums[v - 1] nums[v - 1] = v v = nums[i] print(len(nums)) for i in range(len(nums)): print(nums[i], end=&amp;#34; &amp;#34;) for i in range(len(nums)): if nums[i] !</description>
    </item>
    
  </channel>
</rss>
