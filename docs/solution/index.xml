<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solutions on 罗潇阳的博客</title>
    <link>http://ccviolett.github.io/solution/</link>
    <description>Recent content in Solutions on 罗潇阳的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Apr 2022 23:04:36 +0800</lastBuildDate><atom:link href="http://ccviolett.github.io/solution/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LuoguP3373 【模板】线段树 2</title>
      <link>http://ccviolett.github.io/solution/luogup3373/</link>
      <pubDate>Fri, 15 Apr 2022 23:04:36 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup3373/</guid>
      <description>一、题意    题目链接：Problem
二、题解    三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  typedef long long var;  const int N = 5e5 + 100; const int MOD = 571373;  var read() { 	var s = 0, a = 0, c = getchar(); 	while (!isdigit(c)) s |= c == &amp;#39;-&amp;#39;, c = getchar(); 	while (isdigit(c)) a = a * 10 + c - &amp;#39;0&amp;#39;, c = getchar(); 	return s ?</description>
    </item>
    
    <item>
      <title>LuoguP3379 【模板】最近公共祖先（LCA）</title>
      <link>http://ccviolett.github.io/solution/luogup3379/</link>
      <pubDate>Fri, 15 Apr 2022 23:03:48 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup3379/</guid>
      <description>一、题意    题目链接：Problem
二、题解    三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  typedef long long var;  const int N = 5e5 + 10; const int M = 5e5 + 10;  var read() { 	var s = 0, a = 0, c = getchar(); 	while (!isdigit(c)) s |= c == &amp;#39;-&amp;#39;, c = getchar(); 	while (isdigit(c)) a = a * 10 + c - &amp;#39;0&amp;#39;, c = getchar(); 	return s ?</description>
    </item>
    
    <item>
      <title>LuoguP3382 【模板】三分法</title>
      <link>http://ccviolett.github.io/solution/luogup3382/</link>
      <pubDate>Fri, 15 Apr 2022 23:02:20 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup3382/</guid>
      <description>一、题意    题目链接：Problem
二、题解    三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  typedef long long var; typedef long double let;  const int N = 20; const let eps = 1e-8;  int n; double a[N];  let Calc(let x) { 	let res = 0, tx = 1; 	for (int i = n; i &amp;gt;= 0; --i) { 	res += tx * a[i]; 	tx *= x; 	} 	return res; }  int main() { 	let l, r; 	cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r; 	for (int i = 0; i &amp;lt;= n; ++i) cin &amp;gt;&amp;gt; a[i]; 	while (l + eps &amp;lt; r) { 	let lp = l + (r - l) / 3, 	rp = r - (r - l) / 3; 	let lv = Calc(lp), rv = Calc(rp); 	if (lv &amp;lt; rv) l = lp; 	else r = rp; 	} 	cout &amp;lt;&amp;lt; setprecision(5) &amp;lt;&amp;lt; fixed &amp;lt;&amp;lt; l &amp;lt;&amp;lt; endl; 	return 0; } </description>
    </item>
    
    <item>
      <title>LuoguP3370 【模板】字符串哈希</title>
      <link>http://ccviolett.github.io/solution/luogup3370/</link>
      <pubDate>Fri, 15 Apr 2022 23:01:13 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup3370/</guid>
      <description>一、题意    题目链接：Problem
二、题解    三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  typedef long long var;  struct SHash { 	const int BASE = 107; 	const int MOD = 1e9 + 7;  	var val; 	SHash() { 	val = 0; 	}  	void add(int v) { 	((val *= BASE) += v) %= MOD; 	} };  struct DHash { 	const int BASE1 = 107; 	const int MOD1 = 1e9 + 7; 	const int BASE2 = 109; 	const int MOD2 = 1e9 + 9;  	var val1, val2; 	DHash() { 	val1 = 0, val2 = 0; 	}  	void add(int v) { 	((val1 *= BASE1) += v) %= MOD1; 	((val2 *= BASE2) += v) %= MOD2; 	}  	var val() { 	return val1 * MOD2 + val2; 	} };  const int N = 1e4 + 1; const int M = 1501;  char s[M]; map&amp;lt;var, bool&amp;gt; have;  int main() { 	int n; 	scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); 	int res = 0; 	for (int i = 1; i &amp;lt;= n; ++i) { 	scanf(&amp;#34;%s&amp;#34;, s); 	int len = strlen(s); 	DHash h; 	for (int j = 0; j &amp;lt; len; ++j) h.</description>
    </item>
    
    <item>
      <title>LuoguP3366 【模板】最小生成树</title>
      <link>http://ccviolett.github.io/solution/luogup3366/</link>
      <pubDate>Fri, 15 Apr 2022 23:00:14 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup3366/</guid>
      <description>一、题意    题目链接：Problem
二、题解    三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  const int N = 5e3 + 100; const int M = 2e5 + 100;  struct Edge { 	int u, v, w; };  int n, m; int fa[N]; Edge edge[M];  int Find(int t) { 	if (fa[t] != t) fa[t] = Find(fa[t]); 	return fa[t]; }  bool Check(int x, int y) { 	return Find(x) == Find(y); }  int Link(int x, int y) { 	fa[Find(x)] = Find(y); }  int main() { 	scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); 	for (int i = 1; i &amp;lt;= n; ++i) fa[i] = i; 	for (int i = 1; i &amp;lt;= m; ++i) { 	int x, y, z; 	scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;x, &amp;amp;y, &amp;amp;z); 	edge[i] = (Edge) {x, y, z}; 	} 	sort(edge + 1, edge + m + 1, [=] (Edge a, Edge b) { 	return a.</description>
    </item>
    
    <item>
      <title>LuoguP3383 【模板】线性筛素数</title>
      <link>http://ccviolett.github.io/solution/luogup3383/</link>
      <pubDate>Fri, 15 Apr 2022 22:58:49 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup3383/</guid>
      <description>一、题意    题目链接：Problem
二、题解    三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  typedef long long var;  const int N = 1e8 + 1;  bool notprime[N]; int cnt, prime[N];  int main() { 	int n, q; 	scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;q); 	for (int i = 2; i &amp;lt;= n; ++i) { 	if (!notprime[i]) prime[++cnt] = i;  	for (int j = 1; j &amp;lt;= cnt; ++j) { 	if (1ll * i * prime[j] &amp;gt; n) break; 	notprime[i * prime[j]] = true; 	if (!</description>
    </item>
    
    <item>
      <title>LuoguP1226 【模板】快速幂||取余运算</title>
      <link>http://ccviolett.github.io/solution/luogup1226/</link>
      <pubDate>Fri, 15 Apr 2022 22:56:13 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup1226/</guid>
      <description>一、题意    题目链接：Problem
二、题解    三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  typedef long long var;  var qpow(var x, var y, var p) { 	var res = 1; 	while (y) { 	if (y &amp;amp; 1) (res *= x) %= p; 	(x *= x) %= p; 	y &amp;gt;&amp;gt;= 1; 	} 	return res; }  int main() { 	int a, b, p; 	scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;a, &amp;amp;b, &amp;amp;p); 	printf(&amp;#34;%d^%d mod %d=%lld\n&amp;#34;, a, b, p, qpow(a, b, p)); 	return 0; } </description>
    </item>
    
    <item>
      <title>LuoguP3367 【模板】并查集</title>
      <link>http://ccviolett.github.io/solution/luogup3367/</link>
      <pubDate>Fri, 15 Apr 2022 21:33:24 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup3367/</guid>
      <description>一、题意    题目链接：Problem
二、题解    三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  const int N = 1e4 + 1; const int M = 2e5 + 1;  int n, m; int fa[N];  int Find(int t) { 	if (t != fa[t]) 	fa[t] = Find(fa[t]); 	return fa[t]; }  int Check(int x, int y) { 	x = Find(x), y = Find(y); 	return x == y; }  void Link(int x, int y) { 	x = Find(x), y = Find(y); 	fa[x] = y; }  int main() { 	scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); 	for (int i = 1; i &amp;lt;= n; ++i) fa[i] = i; 	for (int i = 1; i &amp;lt;= m; ++i) { 	int z, x, y; 	scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;z, &amp;amp;x, &amp;amp;y); 	if (z == 1) { 	if (!</description>
    </item>
    
    <item>
      <title>Leetcode41. 缺失的第一个正数</title>
      <link>http://ccviolett.github.io/solution/leetcode41/</link>
      <pubDate>Thu, 14 Apr 2022 00:01:07 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/leetcode41/</guid>
      <description>一、题意    题目链接：Problem
二、题解    题目限制线性时间与常数级别空间，我们需要考虑原地做法。
有两种方式，一种是负号占位，一种是置换归位。
负号占位是指将数组中负数都清楚之后，将每个值对应下标位置上的数取反，随后再遍历一次得到第一个未取反的数，即为最小未出现数。
置换归位是指将数组中能够对应的值放到其值对应的下标上，排除掉无限循环的情况，通过每个元素是否等于其下标即可判断。
三、代码    通过链接：Submission
class Solution:  def firstMissingPositive(self, nums: List[int]) -&amp;gt; int:  for i in range(len(nums)):  v = nums[i]  while v &amp;gt; 0 and v &amp;lt;= len(nums) and (v - 1) != i and v != nums[v - 1]:  nums[i] = nums[v - 1]  nums[v - 1] = v  v = nums[i]   print(len(nums))  for i in range(len(nums)):  print(nums[i], end=&amp;#34; &amp;#34;)   for i in range(len(nums)):  if nums[i] !</description>
    </item>
    
    <item>
      <title>LuoguP1967 [NOIP2013 提高组] 货车运输</title>
      <link>http://ccviolett.github.io/solution/luogup1967/</link>
      <pubDate>Tue, 12 Apr 2022 18:48:16 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup1967/</guid>
      <description>一、题意    题目链接：Problem
二、题解    首先是一个最大生成树，随后是一个树上路径最小值查询。
是一个锻炼 Kruskal/Prim + 树剖/倍增 的板子。
三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  int read() { 	int a; 	scanf(&amp;#34;%d&amp;#34;, &amp;amp;a); 	return a; }  struct Edge { 	int u, v, w; };  const int N = 1e5 + 100; const int M = 1e5 + 100;  int n, m; Edge edge[M]; int fa[N]; int top, fi[N], ne[M &amp;lt;&amp;lt; 1], to[M &amp;lt;&amp;lt; 1], co[M &amp;lt;&amp;lt; 1];  int Find(int t) { 	if (fa[t] !</description>
    </item>
    
    <item>
      <title>Leetcode31. 下一个排列</title>
      <link>http://ccviolett.github.io/solution/leetcode31/</link>
      <pubDate>Sun, 10 Apr 2022 16:40:28 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/leetcode31/</guid>
      <description>一、题意    题目链接：Problem
二、题解    虽然无耻，但是能过，C++ 可以直接用 STL 里面写好的 next_permutation
真要写的话，看官方题解，Python 不太好写。
三、代码    通过链接：Submission
class Solution { public:  void nextPermutation(vector&amp;lt;int&amp;gt;&amp;amp; nums) {  next_permutation(nums.begin(), nums.end());  } }; </description>
    </item>
    
    <item>
      <title>Leetcode42. 接雨水</title>
      <link>http://ccviolett.github.io/solution/leetcode42/</link>
      <pubDate>Sun, 10 Apr 2022 16:33:03 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/leetcode42/</guid>
      <description>一、题意    题目链接：Problem
二、题解    网上一个很妙的做法，水的面积=蓝色框面积+红色框面积-黑色面积-整个矩形面积
三、代码    通过链接：Submission
from pydoc import getpager  class Solution:  def trap(self, height: List[int]) -&amp;gt; int:  n = len(height)  res = 0  maxhl = 0  maxhr = 0  for i in range(n):  maxhl = max(maxhl, height[i])  maxhr = max(maxhr, height[n - i - 1])  res += maxhl + maxhr - height[i]  res -= len(height) * maxhl  return res </description>
    </item>
    
    <item>
      <title>Leetcode53. 最大子数组和</title>
      <link>http://ccviolett.github.io/solution/leetcode53/</link>
      <pubDate>Sun, 10 Apr 2022 15:23:17 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/leetcode53/</guid>
      <description>一、题意    题目链接：Problem
二、题解    累加，但值小于零时舍弃，取过程最大值
三、代码    通过链接：Submission
class Solution:  def maxSubArray(self, nums: List[int]) -&amp;gt; int:  sum = 0  res = nums[0]  for v in nums:  sum += v  if sum &amp;gt; res:  res = sum  if sum &amp;lt; 0:  sum = 0  return res </description>
    </item>
    
    <item>
      <title>Leetcode33. 搜索旋转排序数组</title>
      <link>http://ccviolett.github.io/solution/leetcode33/</link>
      <pubDate>Sun, 10 Apr 2022 15:16:34 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/leetcode33/</guid>
      <description>一、题意    题目链接：Problem
二、题解    因为原来是升序的，可以二分找到分段点，随后在两段内再二分一次即可。
三、代码    通过链接：Submission
class Solution:  def search(self, nums: List[int], target: int) -&amp;gt; int:  l = 0  r = len(nums) - 1  while l &amp;lt; r:  mid = (l + r + 1) &amp;gt;&amp;gt; 1  if nums[mid] &amp;lt; nums[0]:  r = mid - 1  else:  l = mid  p = l   l = p + 1  r = len(nums) - 1  while l &amp;lt;= r:  mid = (l + r) &amp;gt;&amp;gt; 1  if nums[mid] &amp;lt; target:  l = mid + 1  if nums[mid] &amp;gt; target:  r = mid - 1  if nums[mid] == target:  return mid  l = 0  r = p  while l &amp;lt;= r:  mid = (l + r) &amp;gt;&amp;gt; 1  if nums[mid] &amp;lt; target:  l = mid + 1  if nums[mid] &amp;gt; target:  r = mid - 1  if nums[mid] == target:  return mid  return -1 </description>
    </item>
    
    <item>
      <title>洛谷 P1312 [NOIP2011 提高组] Mayan 游戏</title>
      <link>http://ccviolett.github.io/solution/luogup1312/</link>
      <pubDate>Mon, 04 Apr 2022 15:35:31 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup1312/</guid>
      <description>一、题意    题目链接：Problem
二、题解    大模拟，记忆化搜索。
坑点：局面相同时，可能因为层数不同而导致结果不同，记忆化搜索时，不要剪掉了答案的枝。
三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  // 对于代码量偏大的程序，尽可能将功能拆分  // 整体思路： // 拖动 // 掉落 // while(检查) //	消除 //	掉落  struct State {  	// 在不同层的状态，即使局面相同，也可能有不同的结果 	// 因为有时候需要浪费步数 	int level;  	int color[10][10]; 	bool mark[10][10];  	// 说明：输入数据 	void read() { 	for (int i = 0; i &amp;lt; 5; ++i) { 	for (int j = 0; true; ++j) { 	scanf(&amp;#34;%d&amp;#34;, &amp;amp;color[i][j]); 	if (color[i][j] == 0) 	break; 	} 	} 	}  	// 说明：输出数据 	void print() { 	for (int j = 6; j &amp;gt;= 0; --j) { 	for (int i = 0; i &amp;lt; 5; ++i) { 	printf(&amp;#34;%d &amp;#34;, color[i][j]); 	} 	puts(&amp;#34;&amp;#34;); 	} 	puts(&amp;#34;&amp;#34;); 	}  	// 说明：将 (x, y) 往方向 d 拖动 	// 问题：我们需要知道，某一次拖动是否可行，以此来判断是否能够做这一步 	// 方法：给这个函数一个返回值，表示是否能拖动 	bool drag(int x, int y, int d) { 	if (d == 1) { 	if (x == 4) return false; 	swap(color[x][y], color[x + 1][y]); 	} 	if (d == -1) { 	if (x == 0) return false; 	swap(color[x][y], color[x - 1][y]); 	}  	all_fall();  	while (check()) { 	clean(); 	all_fall();  	// print(); 	}  	return true; 	}  	// 说明：位置 (x, y) 向下掉落 	void single_fall(int x, int y) { 	while (y &amp;gt; 0 &amp;amp;&amp;amp; color[x][y - 1] == 0) { 	swap(color[x][y], color[x][y - 1]); 	// 这种写法也行 	// color[x][y - 1] = color[x][y]; 	// color[x][y] = 0;  	y--; 	} 	}  	// 说明：检查当前状态中，是否有能够消除的 	// 问题：我们需要知道还有没有能够消除的，以便进入下一次拖动 	// 方法：函数返回一个值，表示是否存在 	bool check() { 	// 清空标记 	for (int i = 0; i &amp;lt; 5; ++i) { 	for (int j = 0; j &amp;lt; 7; ++j) mark[i][j] = false; 	}  	// 记录有没有能够消除的 	bool have = false;  	// 枚举每个格子 	for (int i = 0; i &amp;lt; 5; ++i) { 	for (int j = 0; j &amp;lt; 7; ++j) { 	if (color[i][j] == 0) continue;  	// printf(&amp;#34;(%d, %d)%d &amp;#34;, i, j, color[i][j]);  	// 计算向右有 t 个相连的 	int t = 1; 	while (i + t &amp;lt; 5 &amp;amp;&amp;amp; color[i][j] == color[i + t][j]) t++; 	t--;  	// printf(&amp;#34;t_right: %d &amp;#34;, t);  	// 如果大于 3 个相连即可标记为消除 	if (t &amp;gt;= 2) { 	for (int k = 0; k &amp;lt;= t; ++k) { 	mark[i + k][j] = true; 	}  	have = true; 	}  	// =============================  	// 计算向上有 t 个相连的 	t = 1; 	while (j + t &amp;lt; 5 &amp;amp;&amp;amp; color[i][j] == color[i][j + t]) t++; 	t--;  	// printf(&amp;#34;t_up: %d\n&amp;#34;, t);  	// 如果大于 3 个相连即可标记为消除 	if (t &amp;gt;= 2) { 	for (int k = 0; k &amp;lt;= t; ++k) { 	mark[i][j + k] = true; 	}  	have = true; 	}  	} 	} 	return have; 	}  	// 说明：清除被标记的连续的块 	void clean() { 	// for (int j = 6; j &amp;gt;= 0; --j) { 	// for (int i = 0; i &amp;lt; 5; ++i) { 	// printf(&amp;#34;%d &amp;#34;, mark[i][j]); 	// } 	// puts(&amp;#34;&amp;#34;); 	// } 	// puts(&amp;#34;&amp;#34;);  	for (int i = 0; i &amp;lt; 5; ++i) { 	for (int j = 0; j &amp;lt; 7; ++j) { 	if (mark[i][j]) { 	color[i][j] = 0; 	} 	} 	} 	}  	// 说明：让整个图下落到不需要下落为止 	void all_fall() { 	for (int i = 0; i &amp;lt; 5; ++i) { 	for (int j = 0; j &amp;lt; 7; ++j) { 	// 如果是空格子就不用下落 	if (color[i][j] == 0) continue; 	single_fall(i, j); 	} 	} 	}  	// 说明：查询图的结果 	bool result() { 	for (int i = 0; i &amp;lt; 5; ++i) { 	for (int j = 0; j &amp;lt; 7; ++j) { 	if (color[i][j] !</description>
    </item>
    
    <item>
      <title>洛谷 P1315 [NOIP2011 提高组] 观光公交</title>
      <link>http://ccviolett.github.io/solution/luogup1315/</link>
      <pubDate>Fri, 01 Apr 2022 17:37:13 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/luogup1315/</guid>
      <description>一、题意    题目链接：Problem
一条路上从左往右有 n 个车站，一辆车从 1 号车站往 n 号车站开，从 $i$ 号车站到 $i + 1$ 号车站需要 $D_i$ 分钟。
给开 m 个人，在 $T_i$ 时刻从 $A_i$ 上车，希望在 $B_i$ 下车，保证 $A_i &amp;lt; B_i$。
车到了某个车站必须等所有人上车了才能发车。
现在有 k 次机会选定 $D_i$ 将其减小 1，问如何分配 k 此机会，使得所有人在车上呆的总时间最少。
二、题解    考虑拆分贡献，要求所有人在车上呆的总时间最少，设下车时间为 $T&amp;rsquo;$，则总时间为 $\sum_{i = 1}^{m} (T&amp;rsquo;_i - T_i)$，拆分为 $\sum T&amp;rsquo;_i - \sum T_i$，其中 $\sum T_i$ 为定值，故我们只需最小化 $\sum T&amp;rsquo;_i$。
我们设在第 i 站下车的人数为 $cntto_i$，到达第 i 站的时间为 $arrive_i$，则 $\sum\limits_{i = 1}^m T&amp;rsquo;_i = \sum\limits_{i = 1}^n (cntto_i * arrive_i)$，其中 $cntto_i$ 是固定的，所以我们只需要最小化到达每个点的时间。</description>
    </item>
    
    <item>
      <title>CF380C. Sereja and Brackets</title>
      <link>http://ccviolett.github.io/solution/cf380c/</link>
      <pubDate>Sun, 06 Mar 2022 13:28:04 +0800</pubDate>
      
      <guid>http://ccviolett.github.io/solution/cf380c/</guid>
      <description>一、题意    题目链接：Problem
给定一个括号序列，每次询问一个区间内合法的括号序列长度。
二、题解    考虑线段树，每个节点维护区间内向左未匹配的括号数量、向右未匹配的括号数量和合法括号序列的数量，每次合并的时候，将左右区间未匹配的括号匹配即可。
三、代码    通过链接：Submission
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std;  const int N = 1e6 + 10;  int n;  struct Node { 	int lhave, rhave, val; 	friend Node operator + (Node a, Node b) { 	if (a.rhave &amp;gt;= b.lhave) { 	return (Node) { 	a.lhave, b.rhave + (a.rhave - b.lhave), a.val + b.</description>
    </item>
    
  </channel>
</rss>
